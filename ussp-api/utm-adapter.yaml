---
openapi: '3.0.0'
info:
  title: 'QGCS UTM Adapter API specification'
  description: |-
    All the Interfaces for the QGCS UTM Adapter are specified here. Using these APIs, you can enable bi-directional data exchange between QGCS and any UTM Service provider, provided they implement these APIs. For more information see the adapter specification in this repository.

    Glossary: 

    `USSP`: A unmanned traffic management services provider, a company that provides UTM services. In many jurisdictions these are certified or regulated entities. 
    
    Unless otherwise specified, fields specified in a message but not declared in the API shall be ignored.
  version: '1.0.0'
servers:
  - url: 'https://redocly.github.io/redoc/?url=https://raw.githubusercontent.com/Dronecode/utm-adapater/main/ussp-api/utm-adapter.yaml'
    description: 'USSP QGCS API'
security:
  - AuthFromOAUTH2:
      - 'qgcs.utm_adapter.write'
      - 'qgcs.utm_adapter.read'
paths:
  /ping:
    get:
      summary: 'Server heartbeat operation'

      description: 'This operation is a ping to check if the server is running'

      security: []
      responses:
        '200':
          description: 'Server running normally'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PongResponse'


  /flight_declaration/flight_declaration_state/{flight_declaration_id}:
    put:
      summary: 'Update the state of a existing Flight Declaration'
      security:
        - AuthFromOAUTH2: ['qgcs.utm_adapter.write']
      description: "Use this endpoint to update the state of an operation"
      parameters:
        - in: path
          name: flight_declaration_id
          description: This is the ID of the flight declaration
          schema:
            type: string
            format: uuid
          required: true

      requestBody:
        description: Set the current state of the Flight Declaration
        required: true
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/UpdateDeclarationState'
                
      responses:
        '200':
          description: Flight Declaration State successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationDetail'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declaration



  /flight_declaration/capabilities: 
    get:
      security:
      - AuthFromOAUTH2:
          - 'qgcs.utm_adapter.read'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightAuthorizationCapabilitiesResponse'
          description: >-
            The self-declared capabilities if the UTM Service Provider as far as support for Flight Authorization (or often times called Strategic Deconfliction) is concerned. This endpoint is supports definitions and capabilities as defined in the EU U-Space regulations and other relevant standards e.g. ASTM F3548.
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      summary: Flight Declaration capabilities 
      description: Retrieve the capabilities of the USS for authorizing flights
      tags:
        - flight-declaration

  /network_remote_id/capabilities: 
    get:
      security:
      - AuthFromOAUTH2:
          - 'qgcs.utm_adapter.read'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RIDCapabilitiesResponse'
          description: >-
            The capabilities of the UTM Service Provider as far as support of ASTM RID standard for Network Remote ID data exchange is concerned. 
        '401':
          description: Bearer access token was not provided in Authorization header, token could not be decoded, or token was invalid.
        '403':
          description: The access token was decoded successfully but did not include a scope appropriate to this endpoint.
      summary: RID capabilities 
      description: Retrieve the capabilities of the USS for network remote id
      tags:
        - network-remote-id


  /network_remote_id/set_telemetry:
    put: 
      tags:
        - network-remote-id
      summary: 'Add Telemetry observation(s)'
      security:
        - AuthFromOAUTH2: [qgcs.utm_adapter.write]
      description:
        "Submit data that is compliant with ASTM RemoteID from the vehicle / GCS into the USSP. A full ASTM compliant dataset is required to be submitted to maintain compatibility with the standard, we expect implementing USSPs to process only parts of the standard they support."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observations:
                  $ref: '#/components/schemas/FlightRIDData'

      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteIDDataProcessed'
          description: Remote ID data successfully submitted and processed.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'

          description: |-
            * One or more parameters were missing or invalid.
            * The Identification Service Area information could not be parsed, or contains illegal data.
  /network_remote_id/uss/flights:
    summary: Basic operation details to meet remote ID requirements.
    description: This endpoint may be polled by remote ID display providers to display
      basic aircraft activity near a user in real time.
    get:
      tags:
      - network-remote-id
      operationId: searchFlights
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightsResponse'
          description: Flight information was successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        413:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested view rectangle was too large.
      security:
      - Authority:
        - qgcs.utm_adapter.read
      summary: /uss/flights
      description: Retrieve basic flight information from a remote ID service provider
        to meet remote ID requirements.  This endpoint will be polled by remote ID
        display providers to display basic aircraft activity near a user in real time.  All
        flights that have any recent positions (past [NetUasInAreaWindow] seconds)
        inside the requested view and time frame must be returned.
    parameters:
    - name: view
      description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed
        a diagonal length specified in the standard.  The view is the smallest box
        bounded by the provided corner points.'
      schema:
        type: string
        example: 29.97816,31.13296,29.98025,31.13535
      in: query
      required: true
    - name: recent_positions_duration
      description: |-
        If specified as greater than zero, include at least the recent positions within the most recent specified duration in seconds.  Otherwise, do not include recent positions.

        A display provider's first poll of this endpoint for a particular view will usually request all recent positions while follow-up polls for that same view will usually not need to request all recent positions.
      schema:
        type: number
        format: float
        minimum: 0
        maximum: 60
      example: 60
      in: query
  /network_remote_id/uss/flights/{id}/details:
    summary: A remote ID flight reported by a remote ID service provider.
    get:
      tags:
      - network-remote-id
      operationId: getFlightDetails
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFlightDetailsResponse'
          description: Flight details were successfully retrieved.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: One or more input parameters were missing or invalid.
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Bearer access token was not provided in Authorization header,
            token could not be decoded, or token was invalid.
        403:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The access token was decoded successfully but did not include
            a scope appropriate to this endpoint.
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: The requested flight could not be found.
      security:
      - Authority:
        - qgcs.utm_adapter.read
      summary: /uss/flights/{id}/details
      description: Retrieve details of a flight from a remote ID service provider
        to meet remote ID requirements.
    parameters:
    - name: id
      description: Remote ID flight ID for this flight; may be obtained in general
        /flights query.
      schema:
        $ref: '#/components/schemas/RIDFlightID'
      in: path
      required: true


  /flight_declaration:
    get:
      summary: 'Get a list of all submitted flight declarations'
      security:
        - AuthFromOAUTH2: [qgcs.utm_adapter.read]
      description: "Get a list of all Flight declarations in the database, if no start or end date is provided, the USSP will provide declarations for today"

      parameters:
        - name: view
          in: query
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard. The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
      responses:
        '200':
          description: Get a list of declared operations, `start_date`,`end_date` and `view` parameters are optional, if they are not provided all declared operations for the past month are displayed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationList'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - flight-declaration
    post:
      summary: 'Add a new Flight Declaration'
      description: "Submit a Flight Declaration into the QGCS Adapter. \
        \ A flight declaration can be added upto 24 hours in advance as GeoJSON."
      security:
        - AuthFromOAUTH2: [qgcs.utm_adapter.write]

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PutFlightDeclarationRequest'

      responses:
        '200':
          description: A flight declaration created notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlightDeclarationCreationResponse'
                
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'

      tags:
        - flight-declaration

  /geo_zone:
    get:
      summary: 'Get a list of all available GeoZones'
      security:
        - AuthFromOAUTH2: [qgcs.utm_adapter.read]
      description: "Get a list of all Geozones in the database, if no start or end date is provided, the USSP will provide GeoZones for today"

      parameters:
        - name: view
          in: query
          description:
            'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard. The view is the smallest box
            bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
        - name: start_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The start date for the report. Must be used together with `end_date`.
        - name: end_date
          in: query
          schema:
            type: string
            format: date
          description: >
            The end date for the report. Must be used together with `start_date`.
      responses:
        '200':
          description: Get a list of active GeoZones, `start_date`,`end_date` and `view` parameters are optional, if they are not provided all the active geozones for today are provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoFenceGeoJSON'
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'
      tags:
        - geo-zone

  /crewed_traffic_information:
    get:
      parameters:
        - name: view
          in: query
          description: 'The area of this view: lat1,lng1,lat2,lng2.  Size may not exceed a diagonal length specified in the standard.  The view is the smallest box bounded by the provided corner points.'
          schema:
            type: string
            example: 29.97816,31.13296,29.98025,31.13535
          required: true
        - name: format
          in: query
          description: Requests traffic information to be delivered in this format One of "asterix" or "asterix" default "mavlink"
          schema:
            type: string
            example: mavlink
          required: false
          
      summary: 'Get the url for latest air-traffic data'
      security:
        - AuthFromPassport:  [qgcs.utm_adapter.read]
      description:
        "Using this endpoint, you can query a stream of air traffic position reports for the view port provided, if the format is unsupported by the USSP, a 415 status code should be provided"

      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrafficInformationDiscoveryResponse'
                
        '400':
          description: Bad request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest400ErrorResponse'
        '401':
          description: Un-authorized request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized401ErrorResponse'
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden403ErrorResponse'
        '415':
           description: Unsupported media type
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/Unsupported415ErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Standard500ErrorResponse'        
        
      tags:
        - crewed-traffic


                
components:
  securitySchemes:
    AuthFromOAUTH2:
      type: oauth2
      description: |-
        UTM Adapter utilizes JWT tokens issued by a OAUTH server. This can be configured as an environment variable. In this case we recommend using / deploying a Authorization Server: e.g. Flight Passport. For more information see https://id.openskies.sh

        Authorization from, or on behalf of, an authorization authority.  This authority shall issue access tokens that are JSON Web Tokens as defined in RFC 7519, using the `RS256` algorithm for the signature, and publish to all providers the public key for verifying that signature.
        The following fields shall be included in the JWT claim for access tokens issued by this authority:
        * `iss`, with the URL at which the token generation request was received.
        * `exp`, with a time no further than 1 hour in the future.
        * `sub`, with unique ID of the client requesting the access token.
        * `scope`, with an array of strings indicating the scopes granted.
        Multiple scopes for a single token shall be granted if requested.  The tokens granted by this authority shall protect against reuse of received tokens to impersonate the sender to other recipients (via use of the `aud` claim or other means).
        Clients shall provide these access tokens in an `Authorization` header in the form `Bearer <token>` in accordance with RFC 6750.
      flows:
        clientCredentials:
          tokenUrl: 'http://id.openskies.sh/oauth/token'
          scopes:
            qgcs.utm_adapter.write: 'Write data to USSP via UTM Adapter'
            qgcs.utm_adapter.read: 'Read data from USSP via UTM Adapter'

  schemas: 

    PongResponse:
      description: The server is running properly
      $ref: '#/components/schemas/Pong'


    Pong:
      properties:
        message:
          type: string
          example: Server running properly


    GeoFenceDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        raw_geo_fence:
          type: object
          $ref: '#/components/schemas/GeoFenceGeoJSON'
        upper_limit:
          type: number
          multipleOf: 0.01
        lower_limit:
          type: number
          multipleOf: 0.01
        name:
          type: string
        bounds:
          type: string
        altitude_ref:
          type: number
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    GeoFenceGeoJSONList:
      type: array
      items:
        $ref: '#/components/schemas/GeoFenceDetails'

    GeoFenceGeoJSON:
      type: object
      required:
        - type
        - features
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoFenceFeatures'

    GeoFenceFeatures:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/GeoFenceGeometryGeoJSON'

        properties:
          type: object
          properties:
            upper_limit:
              type: number
              format: float
            lower_limit:
              type: number
              format: float

          nullable: true
        id:
          oneOf:
            - type: string
            - type: integer

    GeoFenceGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'

    FlightAuthorizationCapability:
      type: string
      description: >-
        Capability of a USS.
          `FlightAuthorisationValidation`: USS supports EU flight authorisation
            parameter validation.
          `BasicStrategicConflictDetection`: USS supports strategic conflict
            detection for typical flights, including future planning (Accepted
            operational intents), activation (Accepted operational intents), and
            closing (deleting the operational intent reference).
          `HighPriorityFlights`: USS supports flights at priority levels higher
            than typical flights.
      enum:
      - FlightAuthorisationValidation
      - BasicStrategicConflictDetection
      - HighPriorityFlights

    FlightAuthorizationCapabilitiesResponse:
      type: object
      properties:
        capabilities:
          type: array
          description: Set of capabilities supported by this USS.
          items:
            $ref: '#/components/schemas/FlightAuthorizationCapability'
          default: []

    TrafficInformationDiscoveryResponse:
      type: object
      properties:
        message:
          type: string
          example: 'Successfully retrieved traffic information url' 
        url: 
          type: string
          example: 'https://www.example.com/traffic_information/get_traffic_information'
          description: >-
            The URL to the traffic information endpoint
        description:
          type: string
          example: 'Start a QUIC connection to the URL to receive traffic information in real-time'

    RIDCapability:
      type: string
      description: >-
        Network Remote ID Capability of a USS.

          `ASTMRID2019`: USS supports Remote ID as defined in ASTM Remote ID standard that was released in 2019.

          `ASTMRID2022`: USS supports Remote ID as defined in ASTM Remote ID standard that was released in 2022.

      enum:
      - ASTMRID2019
      - ASTMRID2022
    RIDCapabilitiesResponse:
      type: object
      properties:
        capabilities:
          type: array
          description: Set of capabilities supported by this USS.
          items:
            $ref: '#/components/schemas/RIDCapability'
          default: []
   
    PutFlightDeclarationRequest: 
      type: object
      properties:           
        type_of_operation: 
          enum:
          - 1
          - 2
          type: integer
          description: >
            Set the activity type and the airspace
             * `1` - VLOS
             * `2` - BVLOS
        originating_party:
          description: Provide the name of the flight declaration e.g. OpenUTM 102
          type: string
          format: email
        submitted_by:
          description: Email address of person submitting this declaration
          type: string
          format: email
        operator_id:
          description: Set the id of the operator operating this flight.
          type: string
          example: Flight 1023
        start_datetime:
          description: The start date and time for the flight
          type: string
          format: date-time
        end_datetime:
          description: The end date and time for the flight
          type: string
          format: date-time
        flight_declaration_geo_json: 
          $ref: '#/components/schemas/FlightDeclarationGeoJSONFeatureCollection'
    
    FlightDeclarationGeoJSONFeatureCollection:
      type: object
      properties: 
        type:
          type: string
          example: "FeatureCollection"
        features:
          type: array
          items:
            $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'

    FlightDeclarationFeatureGeoJSON:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/FlightDeclarationGeometryGeoJSON'

        properties:
          type: object
          properties:
            start_time:
              type: string
              format: date-time
            end_time:
              type: string
              format: date-time
            max_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'
            min_altitude:
              type: object
              properties:
                metres:
                  type: number
                datum:
                  type: string
                  enum:
                    - 'WGS84'
          nullable: true
        id:
          oneOf:
            - type: string
              format: uuid
            - type: integer

    FlightDeclarationGeometryGeoJSON:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Polygon
            - MultiPolygon

        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point2D'
            
    Point2D:
      type: array
      maxItems: 2
      minItems: 2
      items:
        type: number

    RemoteIDDataProcessed:
      description: Remote ID data processed successfully
      type: object
      properties:
        message:
          type: string
          example: 'RemoteID data succesfully submitted'

    UpdateDeclarationState:
      description: A list of flight declaration states that can be manually updated
      type: object
      properties:
          submitted_by:
            type: string
            format: email
          state:
            enum:
            - 2
            - 4
            - 5 
            - 7
            type: integer
            description: >
              The state of the operation
              * `2` - Activated
              * `4` - Contingent
              * `5` - Ended
              * `7` - Cancelled

    FlightDeclarationCreationResponse:
      description: A flight declaration has been created
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        message:
          type: string
          example: 'Submitted Flight Declaration'
        is_approved:
          type: boolean
          example: 1
        state:
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4 
          - 5
          - 8
          type: integer
          example: 0
          description: >
            The state of the operation
            * `0` - Processed
            * `1` - Accepted
            * `2` - Activated
            * `3` - Nonconforming
            * `4` - Contingent
            * `5` - Ended
            * `8` - Rejected
            

    BadRequest400ErrorResponse:
      description: The data provided in the request is not valid
      $ref: '#/components/schemas/Error'

    Unauthorized401ErrorResponse:
      description: The request requires an user authentication

      $ref: '#/components/schemas/Error'

    Forbidden403ErrorResponse:
      description: the access is not allowed

      $ref: '#/components/schemas/Error'
      
    Unsupported415ErrorResponse:
      description: The media type is not supported.
      $ref: '#/components/schemas/Error'

    Standard500ErrorResponse:
      description: An unexpected error ocurred.
      $ref: '#/components/schemas/Error'
    
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: string
        message:
          type: string
          
    FlightDeclarationList:
      type: array
      items:
        $ref: '#/components/schemas/FlightDeclarationDetail'

        
    FlightDeclarationDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        approved_by:
          description: Email address of person approving this declaration
          type: string
          format: email
        submitted_by:
          description: Email address of person submitting this declaration
          type: string
          format: email  
        is_approved:
          description: Is the operation approved for flight?
          type: string
          format: boolean          
          example: 1
        start_datetime:
          description: The start for the query
          type: string
          format: date-time
        end_datetime:
          description: The enddate for the query
          type: string
          format: date-time
        flight_declaration_geojson:
          description: The operational intent for this flight declaration as a GeoJSON FeatureCollection, a operational intent is internally used by the USSP to exchange flight plan information with systems like InterUSS
          type: object
          properties: 
            type:
              type: string
              example: "FeatureCollection"
            features:
              type: array
              items:
                $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'
        flight_declaration_raw_geojson:
          description: The raw / original Flight Plan as GeoJSON as retrieved from QGCS
          type: object
          properties: 
            type:
              type: string
              example: "FeatureCollection"
            features:
              type: array
              items:
                $ref: '#/components/schemas/FlightDeclarationFeatureGeoJSON'
        operational_intent:
          description: The operational intent for this flight declaration, a raw flight plan is converted to an operational intent which can be in turn submitted to a DSS (e.g see the InterUSS project within Linux Foundation)
          $ref: '#/components/schemas/OperationalIntentDetails'
            
        state:
          $ref: '#/components/schemas/FlightDeclarationStateEnum'
        type_of_operation: 
          enum:
          - 1
          - 2

          type: integer
          description: >
            Set the type of operation
             * `1` - VLOS
             * `2` - BVLOS
            
    OperationalIntentDetails:
      description: >-
        Details of a UTM operational intent. Note that this data is not stored
        in the DSS; only with the clients.
      type: object
      properties:
        volumes:
          description: >-
            Volumes that wholly contain the operational intent while being as
            small as practical.

            Start and end times, as well as lower and upper altitudes, are
            required for each volume. The end time may not be in the past.

            Required with at least one item when the operational intent is
            Accepted, Activated, or Nonconforming.

            May not contain any items when the operational intent is Contingent.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          default: []
        off_nominal_volumes:
          description: >-
            Volumes that contain the anticipated area of non-conformance while
            the aircraft is in the Nonconforming or Contingent states.

            Start and end times, as well as lower and upper altitudes, are
            required for each volume. The end time may not be in the past.

            Required with at least one item when the operational intent is
            Nonconforming or Contingent.

            May not contain any items when the operational intent is Accepted or
            Activated.
          type: array
          items:
            $ref: '#/components/schemas/Volume4D'
          default: []
        priority:
          $ref: '#/components/schemas/Priority'
    FlightDeclarationStateEnum:
          type: integer

          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          description: >
            The state of the operation
             * `0` - Processing
             * `1` - Accepted
             * `2` - Activated
             * `3` - Nonconforming
             * `4` - Contingent
             * `5` - Ended
             * `6` - Withdrawn
             * `7` - Cancelled
             * `8` - Rejected

    Latitude:
      format: double
      description:
        Degrees of latitude north of the equator, with reference to the
        WGS84 ellipsoid.
      maximum: 90
      exclusiveMaximum: false
      minimum: -90
      exclusiveMinimum: false
      type: number
      example: 34.12
    Longitude:
      format: double
      description:
        Degrees of longitude east of the Prime Meridian, with reference
        to the WGS84 ellipsoid.
      maximum: 180
      exclusiveMaximum: false
      minimum: -180
      exclusiveMinimum: false
      type: number
      example: -118.456
    LatLngPoint:
      description: Point on the earth's surface.
      required:
        - lat
        - lng
      type: object
      properties:
        lng:
          $ref: '#/components/schemas/Longitude'
        lat:
          $ref: '#/components/schemas/Latitude'

    Priority:
      description: >-
        Ordinal priority of the operational intent, as defined by the
        regulator.  Operational intents with lesser values are lower priority
        than all operational intents with greater values.  A lower-priority
        operational intent may not create a conflict with a higher-priority
        operational intent.  A higher-priority operational intent may create a
        conflict with a lower-priority operational intent.  The regulator
        specifies whether an operational intent may create a conflict with other
        operational intents of the same priority.
      type: integer
      default: 0
    GeoPolygon:
      description: |-
        An enclosed area on the earth.
        The bounding edges of this polygon shall be the shortest paths between connected vertices.  This means, for instance, that the edge between two points both defined at a particular latitude is not generally contained at that latitude.
        The winding order shall be interpreted as the order which produces the smaller area.
        The path between two vertices shall be the shortest possible path between those vertices.
        Edges may not cross.
        Vertices may not be duplicated.  In particular, the final polygon vertex shall not be identical to the first vertex.
      required:
        - vertices
      type: object
      properties:
        vertices:
          minItems: 3
          type: array
          items:
            $ref: '#/components/schemas/LatLngPoint'

    Volume3D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description:
        A three-dimensional geographic volume consisting of a vertically-extruded
        polygon.
      required:
        - footprint
      type: object
      properties:
        footprint:
          anyOf:
            - $ref: '#/components/schemas/GeoPolygon'
          description: Projection of this volume onto the earth's surface.
        altitude_lo:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Minimum bounding altitude of this volume.
        altitude_hi:
          anyOf:
            - $ref: '#/components/schemas/Altitude'
          description: Maximum bounding altitude of this volume.

    Altitude:
      format: float
      description: An altitude, in meters, above the WGS84 ellipsoid.
      type: number
      example: 19.5

    Volume4D: # Reference https://github.com/uastech/standards/blob/master/remoteid/canonical.yaml
      description: Contiguous block of geographic spacetime.
      required:
        - spatial_volume
      type: object
      properties:
        spatial_volume:
          anyOf:
            - $ref: '#/components/schemas/Volume3D'
          description: Constant spatial extent of this volume.
        time_start:
          format: date-time
          description:
            Beginning time of this volume.  RFC 3339 format, per OpenAPI
            specification.
          type: string
        time_end:
          format: date-time
          description: End time of this volume.  RFC 3339 format, per OpenAPI specification.
          type: string

    ####################### Start of ASTM-standard definitions #######################

    FlightRIDData:
      type: array
      items:
        type: object
        required:
          - current_states
          - flight_details
          
        properties:
        
          current_states:
            type: array
            items:
              $ref: '#/components/schemas/RIDAircraftState'
          flight_details: 
            type: object
            $ref: '#/components/schemas/RIDOperatorDetails'

    RIDOperatorDetails:
      description:
        Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
        - id
      type: object
      properties:
        id:
          description: ID for this flight, matching a existing flight declaration ID in Flight Blender in request. If the ID of does not match, Blender will reject data from this endpoint.
          type: string
          example: 238c0189-cdb1-43f0-8510-5718b37eeca4    
          
        eu_classification:
          description: When this field is specified, the Classification Type is "European
            Union".  If no other classification field is specified, the Classification Type
            is "Undeclared".
          anyOf:
          - $ref: '#/components/schemas/UAClassificationEU'
        uas_id:
          $ref: '#/components/schemas/UASID'
        operator_id:
          description: This optional field provides a CAA-issued registration/license ID for the
            remote pilot or operator. Format is <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII
            encoded, only uppercase letters (A-Z), dot (.), and digits (0-9) are allowed. Example
            is valid for the US.
          type: string
          default: ''
          example: N.OP123456
        operator_location:
          $ref: '#/components/schemas/OperatorLocation'
        operation_description:
          description:
            Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example:
            SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
        serial_number:
          description:
            Can be specified when no registration ID exists and required
            by law in a region. This is expressed in the ANSI/CTA-2063-A Physical Serial
            Number format.
          type: string
          example: INTCJ123-4567-890
        registration_number:
          description:
            If a CAA provides a method of registering UAS, this number
            is provided by the CAA or its authorized representative.  Required when
            required by law in a region.
          type: string
          example: FA12345897
    RIDAuthData:
      description: Additional authentication data.
      required:
        - format
        - data
      type: object
      properties:
        format:
          description: Format of additional authentication data.
          type: string
        data:
          description: Authentication data in form specified by `format`.
          type: string
    UAClassificationEU:
      type: object
      properties:
        category:
          type: string
          enum:
          - EUCategoryUndefined
          - Open
          - Specific
          - Certified
          default: EUCategoryUndefined
        class:
          type: string
          enum:
          - EUClassUndefined
          - Class0
          - Class1
          - Class2
          - Class3
          - Class4
          - Class5
          - Class6
          default: EUClassUndefined          
    UASID:
      description: Identification of the UAS performing this flight.  At least one
        field of this object must be specified.
      type: object
      properties:
        serial_number:
          description: This is expressed in the CTA-2063-A Serial Number format.
          type: string
          example: INTCJ123-4567-890
          default: ''
        registration_id:
          description: If a CAA provides a method of registering UAS, this number
            is provided by the CAA or its authorized representative.  Format is
            <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII encoded, only
            uppercase letters (A-Z), dot (.), and digits (0-9) are allowed.
            Example is valid for the US.
          type: string
          example: N.123456
          default: ''
        utm_id:
          description: A UTM-provided universally unique ID traceable to a
            non-obfuscated ID that acts as a "session id" to protect exposure of
            operationally sensitive information.
          type: string
          example: ae1fa066-6d68-4018-8274-af867966978e
          default: ''
        specific_session_id:
          $ref: '#/components/schemas/SpecificSessionID'
    OperatorLocation:
      description: Location associated with the Remote Pilot
      type: object
      required:
      - position
      properties:
        position:
          anyOf:
          - $ref: '#/components/schemas/LatLngPoint'
          description: Position of the Remote Pilot.
        altitude:
          anyOf:
          - $ref: '#/components/schemas/Altitude'
          description: Provides the Operator Altitude based on WGS-84 height above ellipsoid (HAE)
            (See Geodetic Altitude).  This value is provided in meters and must have a minimum
            resolution of 1 m.
        altitude_type:
          description: Source of data for the altitude field.
          type: string
          enum:
          - Takeoff
          - Dynamic
          - Fixed
    SpecificSessionID:
      description: |-
        A unique 20 byte ID intended to identify a specific flight (session) while providing a
        greater level of privacy to the operator. The first byte is the registered unique Specific Session ID
        Type maintained by a registrar (see Annex A5), and the remaining 19 bytes is the Session ID per the
        Specific Session ID Type specification.
        Initial scheme registry entries include:
        0 – reserved
        1 – Internet Engineering Task Force (IETF) Drone Remote Identification Protocol (DRIP) entity ID
        2 – IEEE 1609.2 HashedID8
        Expressed as a hexadecimal string of the underlying data bytes.  A recipient should ignore any dashes in this value.  If fewer than 20 bytes are specified, the remaining bytes at the end are assumed to have value 0.
      type: string
      example: 02-a1b2c3d4e5f60708
      default: ''          
    URL:
      description: Valid http or https URL.
      type: string
    RIDFlightsURL:
      anyOf:
      - $ref: '#/components/schemas/URL'
      description: |-
        The URL at which the remote ID flights and their details may be retrieved.  See `/flights` and `/flights/{id}/details` paths for specification of this endpoint.
        This URL is the base flights resource.  If this URL is specified as https://example.com/flights then the flight details for a particular {id} may be obtained at the URL https://example.com/flights/{id}/details.  This URL may not have a trailing / character.
      type: string
      example: https://example.com/flights
    Time:
      required:
        - value
        - format
      type: object
      properties:
        value:
          type: string
          description: >-
            RFC3339-formatted time/date string.  The time zone must be 'Z'.
          format: date-time
          example: '1985-04-12T23:20:50.52Z'
        format:
          type: string
          enum:
            - RFC3339
            
    RIDAircraftState:
      description: State of an aircraft for the purposes of remote ID.
      required:
      - timestamp
      - timestamp_accuracy
      - accuracy_h
      - accuracy_v
      - speed
      - vertical_speed
      - track
      - speed_accuracy
      - position
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/Time'
        timestamp_accuracy:
          format: float
          description: 'Declaration of timestamp accuracy, which is the largest difference
            between Timestamp and true time of applicability for any of the following
            fields: Latitude, Longitude, Geodetic Altitude, Pressure Altitude of Position,
            Height. to determine time of applicability of the location data provided.  Expressed
            in seconds, precise to 1/10ths of seconds. The accuracy reflects the 95%
            uncertainty bound value for the timestamp.'
          minimum: 0
          exclusiveMinimum: false
          type: number
        operational_status:
          $ref: '#/components/schemas/RIDOperationalStatus'
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
        track:
          format: float
          description: Direction of flight expressed as a "True North-based" ground
            track angle.  This value is provided in degrees East of North with a minimum
            resolution of 1 degree.
          maximum: 360
          exclusiveMaximum: true
          minimum: 0
          exclusiveMinimum: false
          type: number
        speed:
          format: float
          description: Ground speed of flight in meters per second.
          minimum: 0
          exclusiveMinimum: false
          type: number
          example: 1.9
        speed_accuracy:
          anyOf:
          - $ref: '#/components/schemas/SpeedAccuracy'
          description: Accuracy of horizontal ground speed.
        vertical_speed:
          format: float
          description: Speed up (vertically) WGS84-HAE, m/s.
          type: number
          example: 0.2
        height:
          $ref: '#/components/schemas/RIDHeight'
        group_radius:
          format: float
          description: Farthest horizontal distance from reported group location at
            which an aircraft in the group may be located (meters).  This value contains
            the "Operating Area Radius" data from the common data dictionary when
            group operation area is specified by point-radius.
          minimum: 0
          exclusiveMinimum: true
          type: number
        group_ceiling:
          format: float
          description: Maximum altitude (meters WGS84-HAE) of Group Operation.  This
            value contains the "Operating Area Ceiling" data from the common data
            dictionary when group operation area is specified by point-radius.
          type: number
        group_floor:
          format: float
          description: Minimum altitude (meters WGS84-HAE) of Group Operation.  If
            not specified, ground level shall be assumed.  This value contains the
            "Operating Area Floor" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: number
        group_count:
          format: int32
          description: When operating a group (or formation or swarm), number of aircraft
            in group.  This value contains the "Operating Area Count" data from the
            common data dictionary when group operation area is specified by point-radius.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        group_time_start:
          format: date-time
          description: Time at which a group operation starts.  This value contains
            the "Operation Area Start" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: string
        group_time_end:
          format: date-time
          description: Time at which a group operation starts.  This value contains
            the "Operation Area End" data from the common data dictionary when group
            operation area is specified by point-radius.
          type: string
    RIDHeight:
      description: A relative altitude for the purposes of remote ID.
      required:
      - distance
      - reference
      type: object
      properties:
        distance:
          format: float
          description: Distance above reference datum.  This value is provided in
            meters and must have a minimum resolution of 1 meter.
          type: number
        reference:
          description: The reference datum above which the height is reported.
          enum:
          - TakeoffLocation
          - GroundLevel
          type: string          
    SpeedAccuracy:
      description: |-
        This is the same enumeration scale and values from ADS-B NACv.

        `SAUnknown`: Unknown speed accuracy

        `SA10mpsPlus`: > 10 m/s

        `SA10mps`: < 10 m/s

        `SA3mps`: < 3 m/s

        `SA1mps`: < 1 m/s

        `SA03mps`: < 0.3 m/s
      enum:
      - SAUnknown
      - SA10mpsPlus
      - SA10mps
      - SA3mps
      - SA1mps
      - SA03mps
      type: string
    RIDAircraftType:
      description: |-
        Type of aircraft for the purposes of remote ID.

        `VTOL` is a fixed wing aircraft that can take off vertically.  `Rotocraft` includes multirotor.
      enum:
      - NotDeclared
      - Aeroplane
      - Rotorcraft
      - Gyroplane
      - VTOL
      - Ornithopter
      - Glider
      - Kite
      - FreeBalloon
      - CaptiveBalloon
      - Airship
      - FreeFallOrParachute
      - Rocket
      - TetheredPoweredAircraft
      - GroundObstacle
      - Other
      type: string
    RIDRecentAircraftPosition:
      description: ""
      required:
      - time
      - position
      type: object
      properties:
        time:
          format: date-time
          description: Time at which this position applied.  RFC 3339 format, per
            OpenAPI specification.
          type: string
        position:
          $ref: '#/components/schemas/RIDAircraftPosition'
    RIDAircraftPosition:
      description: Position of an aircraft as reported for remote ID purposes.
      required:
      - lat
      - lng
      - alt
      type: object
      properties:
        lat:
          $ref: '#/components/schemas/Latitude'
        lng:
          $ref: '#/components/schemas/Longitude'
        alt:
          format: float
          description: 'Geodetic altitude (NOT altitude above launch, altitude above
            ground, or EGM96): aircraft distance above the WGS84 ellipsoid as measured
            along a line that passes through the aircraft and is normal to the surface
            of the WGS84 ellipsoid.  This value is provided in meters and must have
            a minimum resolution of 1 meter.'
          type: number
          example: 1321.2
        accuracy_h:
          anyOf:
          - $ref: '#/components/schemas/HorizontalAccuracy'
          description: Horizontal error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        accuracy_v:
          anyOf:
          - $ref: '#/components/schemas/VerticalAccuracy'
          description: Vertical error that is likely to be present in this reported
            position.  Required when `extrapolated` field is true and always in the
            entry for the current state.
        extrapolated:
          description: True if this position was generated primarily by computation
            rather than primarily from a direct instrument measurement.  Assumed false
            if not specified.
          type: boolean
        pressure_altitude:
          format: float
          description: The uncorrected altitude (based on reference standard 29.92
            inHg, 1013.25 mb) provides a reference for algorithms that utilize "altitude
            deltas" between aircraft.  This value is provided in meters and must have
            a minimum resolution of 1 meter.
          type: number
    HorizontalAccuracy:
      description: |-
        This is the NACp enumeration from ADS-B, plus 1m for a more complete range for UAs.

        `HAUnknown`: Unknown horizontal accuracy

        `HA10NMPlus`: > 10NM (18.52km)

        `HA10NM`: < 10NM (18.52km)

        `HA4NM`: < 4NM (7.408km)

        `HA2NM`: < 2NM (3.704km)

        `HA1NM`: < 1NM (1852m)

        `HA05NM`: < 0.5NM (926m)

        `HA03NM`: < 0.3NM (555.6m)

        `HA01NM`: < 0.1NM (185.2m)

        `HA005NM`: < 0.05NM (92.6m)

        `HA30m`: < 30m

        `HA10m`: < 10m

        `HA3m`: < 3m

        `HA1m`: < 1m
      enum:
      - HAUnknown
      - HA10NMPlus
      - HA10NM
      - HA4NM
      - HA2NM
      - HA1NM
      - HA05NM
      - HA03NM
      - HA01NM
      - HA005NM
      - HA30m
      - HA10m
      - HA3m
      - HA1m
      type: string
    VerticalAccuracy:
      description: |-
        This is the GVA enumeration from ADS-B, plus some finer values for UAs.

        `VAUnknown`: Unknown vertical accuracy

        `VA150mPlus`: > 150m

        `VA150m`: < 150m

        `VA45m`: < 45m

        `VA25m`: < 25m

        `VA10m`: < 10m

        `VA3m`: < 3m

        `VA1m`: < 1m
      enum:
      - VAUnknown
      - VA150mPlus
      - VA150m
      - VA45m
      - VA25m
      - VA10m
      - VA3m
      - VA1m
      type: string
      
    RIDOperationalStatus:
      description: |-
        Operational Status indicates whether the associated UA is on the ground, airborne, or in an
        emergency situation, or the Remote ID system has failed. The emergency status takes
        precedence over the other status modes. This status can be used for filtering purposes.
      enum:
      - Undeclared
      - Ground
      - Airborne
      - Emergency
      - RemoteIDSystemFailure
      type: string
      default: Undeclared
      ####################### Start of ASTM-standard definitions #######################

    GetFlightsResponse:
      description: Response to remote ID provider query for flight information in
        an area of interest.
      required:
      - timestamp
      type: object
      properties:
        timestamp:
          description: The remote ID service provider's timestamp for when this information
            was current.
          anyOf:
          - $ref: '#/components/schemas/Time'
        flights:
          description: A list of all flights that have been within the requested area
            within the remote ID retention period.  This includes flights that are
            not currently within the requested area, but were within the requested
            area within the remote ID retention period.  Aircraft that are not in
            flight, and have not been in flight within the retention period, should
            not be included in this list.
          type: array
          items:
            $ref: '#/components/schemas/RIDFlight'
          default: []
        no_isas_present:
          type: boolean
          default: false
          description: The requested view is entirely outside any remote ID service
            provision areas (Identification Service Area volumes) this provider has.  A
            display provider receiving this response should discontinue polling for
            this endpoint for the view port requested until otherwise directed by
            DSS interactions.
    RIDFlight:
      description: Description of a remote ID flight.
      required:
      - id
      - aircraft_type
      type: object
      properties:
        id:
          $ref: '#/components/schemas/RIDFlightID'
        aircraft_type:
          anyOf:
          - $ref: '#/components/schemas/UAType'
          description: Generic type of aircraft.
        current_state:
          anyOf:
          - $ref: '#/components/schemas/RIDAircraftState'
          description: |-
            The most up-to-date state of the aircraft.  Required when the aircraft is
            currently in the requested area unless no telemetry is expected during during
            the flight and `volumes` is specified.

            If current data is not being received from the UAS by the Service Provider,
            the lack of change in this field is sufficient to indicate that current
            data is not being received.

            If the USS believes a flight is airborne and expects to receive telemetry
            at some point during the flight but has not yet received telemetry, this
            field should be populated with the USS's best estimate of the position
            of the flight with appropriate accuracy indications.
        operating_area:
          description: |-
            The area the aircraft is/are within.  Required, with 1 or more elements, if
            `current_state` is not specified.  The fields `time_start` and `time_end` are
            required.

            If `current_state` is specified, this field should not be specified.
            If `current_state` was available at any time during the flight, or is
            expected to be available at any time during the flight, this field should
            not be specified.
          anyOf:
          - $ref: '#/components/schemas/OperatingArea'
        simulated:
          description: If specified as true, this flight is not a physical aircraft;
            it is just a simulation to test the system.
          type: boolean
          default: false
        recent_positions:
          description: |-
            A short collection of recent aircraft movement, specified only when `recent_positions_duration` is greater than zero.  If `volumes` is not specified and `recent_positions_duration` is greater than zero, then this field is required.

            Recent positions provided in this field must conform to requirements in the standard which generally prohibit including positions outside the requested area except transitionally when the aircraft enters or exits the requested area, and which prohibit including positions that not sufficiently recent.

            Note that a UI should not draw a connective line between two consecutive position reports that both lie outside the requested area.
          type: array
          items:
            $ref: '#/components/schemas/RIDRecentAircraftPosition'
          default: []
    RIDFlightID:
      description: |-
        ID, unique to a remote ID service provider, which identifies a particular flight for which the remote ID service provider is providing remote ID services.

        The following characters are not allowed: \0 \t \r \n # % / : ? @ [ \ ]
      maxLength: 255
      minLength: 1
      type: string
      example: uss1.JA6kHYCcByQ-6AfU
    
    UAType:
      description: |-
        The UA Type can help infer performance, speed, and duration of flights, for example, a
        "fixed wing" can generally fly in a forward direction only (as compared to a multi-rotor).
        This can also help differentiate aircraft types without sharing operationally sensitive
        information like the make and model of a particular aircraft. Make and model are
        anticipated to become available during the Registration ID lookup process. UAS Type is also
        useful for correlating visual observation with data received. The types were formulated
        based on unique flight characteristics.

        `HybridLift` is a fixed wing aircraft that can take off vertically.  `Helicopter` includes multirotor.
      enum:
      - NotDeclared
      - Aeroplane
      - Helicopter
      - Gyroplane
      - HybridLift
      - Ornithopter
      - Glider
      - Kite
      - FreeBalloon
      - CaptiveBalloon
      - Airship
      - FreeFallOrParachute
      - Rocket
      - TetheredPoweredAircraft
      - GroundObstacle
      - Other
      type: string
      default: NotDeclared
    OperatingArea:
      description: Area of operation containing one or more aircraft participating in remote identification.
      type: object
      properties:
        aircraft_count:
          format: int32
          description: Allows for operating a single UA, group, formation, or swarm. Quantity in Group.
          minimum: 1
          exclusiveMinimum: false
          type: integer
        volumes:
          description: The area where a group or Intent-Based Network Participant operation is planned or taking place.
          type: array
          items:
            $ref: '#/components/schemas/OperatingArea'
          default: []    
    GetFlightDetailsResponse:
      description: Response to remote ID provider query for details about a specific
        flight.
      required:
      - details
      type: object
      properties:
        details:
          $ref: '#/components/schemas/RIDFlightDetails'

    ErrorResponse:
      description: Data provided when an off-nominal condition was encountered.
      type: object
      properties:
        message:
          description: Human-readable message indicating what error occurred and/or
            why.
          type: string
          default: ''
          
    RIDFlightDetails:
      description: Details about a flight reported by a remote ID service provider.  At
        least one of the registration or serial fields must be filled if required
        by CAA.
      required:
      - id
      type: object
      properties:
        id:
          description: ID for this flight, matching argument in request.
          type: string
          example: a3423b-213401-0023
        eu_classification:
          description: When this field is specified, the Classification Type is "European
            Union".  If no other classification field is specified, the Classification Type
            is "Undeclared".
          anyOf:
          - $ref: '#/components/schemas/UAClassificationEU'
        uas_id:
          $ref: '#/components/schemas/UASID'
        operator_id:
          description: This optional field provides a CAA-issued registration/license ID for the
            remote pilot or operator. Format is <ICAO Nationality MarkA>.<CAA Assigned ID>, ASCII
            encoded, only uppercase letters (A-Z), dot (.), and digits (0-9) are allowed. Example
            is valid for the US.
          type: string
          default: ''
          example: N.OP123456
        operator_location:
          $ref: '#/components/schemas/OperatorLocation'
        operation_description:
          description: Free-text field that enables the operator to describe the purpose
            of a flight, if so desired.
          type: string
          example: SafeFlightDrone company doing survey with DJI Inspire 2. See my
            privacy policy www.example.com/privacy.
          default: ''
        auth_data:
          $ref: '#/components/schemas/RIDAuthData'
